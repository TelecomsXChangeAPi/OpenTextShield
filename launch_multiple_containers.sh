#!/bin/bash
# Launch and test multiple OpenTextShield v2.5 containers

echo "üöÄ Launching Multiple OpenTextShield v2.5 Containers"
echo "==================================================="

# Container configurations
PRIMARY_NAME="ots-primary"
PRIMARY_API_PORT="8002"
PRIMARY_FRONTEND_PORT="8080"

SECONDARY_NAME="ots-secondary"
SECONDARY_API_PORT="8003"
SECONDARY_FRONTEND_PORT="8081"

echo "üê≥ Launching Primary Container..."
echo "=================================="
echo "docker run -d --name $PRIMARY_NAME \\"
echo "  -p $PRIMARY_API_PORT:8002 \\"
echo "  -p $PRIMARY_FRONTEND_PORT:8080 \\"
echo "  --restart unless-stopped \\"
echo "  opentextshield:v2.5"
echo ""

echo "üê≥ Launching Secondary Container..."
echo "===================================="
echo "docker run -d --name $SECONDARY_NAME \\"
echo "  -p $SECONDARY_API_PORT:8002 \\"
echo "  -p $SECONDARY_FRONTEND_PORT:8080 \\"
echo "  --restart unless-stopped \\"
echo "  opentextshield:v2.5"
echo ""

echo "‚è≥ Waiting for containers to start..."
echo "====================================="
echo "sleep 10  # Wait for models to load"
echo ""

echo "üîç Checking Container Status..."
echo "==============================="
echo "docker ps --filter name=ots-"
echo ""

echo "üß™ Testing Primary Container..."
echo "==============================="
echo "# Health check"
echo "curl -f http://localhost:$PRIMARY_API_PORT/health"
echo ""
echo "# Prediction test"
echo "curl -X POST \"http://localhost:$PRIMARY_API_PORT/predict/\" \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{\"text\":\"Transfer 500 euros to account DE1234567890\",\"model\":\"ots-mbert\"}'"
echo ""

echo "üß™ Testing Secondary Container..."
echo "================================="
echo "# Health check"
echo "curl -f http://localhost:$SECONDARY_API_PORT/health"
echo ""
echo "# Prediction test"
echo "curl -X POST \"http://localhost:$SECONDARY_API_PORT/predict/\" \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{\"text\":\"Your ING Bank account has been credited\",\"model\":\"ots-mbert\"}'"
echo ""

echo "üîó Testing TMForum APIs..."
echo "=========================="
echo "# Primary TMForum"
echo "curl -X POST \"http://localhost:$PRIMARY_API_PORT/tmf-api/aiInferenceJob\" \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{"
echo "    \"priority\": \"normal\","
echo "    \"input\": {"
echo "      \"inputType\": \"text\","
echo "      \"inputFormat\": \"plain\","
echo "      \"inputData\": {\"text\": \"Free iPhone giveaway!\"}"
echo "    },"
echo "    \"model\": {"
echo "      \"id\": \"ots-mbert\","
echo "      \"name\": \"OpenTextShield mBERT\","
echo "      \"version\": \"2.5\","
echo "      \"type\": \"bert\","
echo "      \"capabilities\": [\"text-classification\", \"multilingual\"]"
echo "    }"
echo "  }'"
echo ""

echo "# Secondary TMForum"
echo "curl -X POST \"http://localhost:$SECONDARY_API_PORT/tmf-api/aiInferenceJob\" \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{"
echo "    \"priority\": \"normal\","
echo "    \"input\": {"
echo "      \"inputType\": \"text\","
echo "      \"inputFormat\": \"plain\","
echo "      \"inputData\": {\"text\": \"Meeting at 3 PM\"}"
echo "    },"
echo "    \"model\": {"
echo "      \"id\": \"ots-mbert\","
echo "      \"name\": \"OpenTextShield mBERT\","
echo "      \"version\": \"2.5\","
echo "      \"type\": \"bert\","
echo "      \"capabilities\": [\"text-classification\", \"multilingual\"]"
echo "    }"
echo "  }'"
echo ""

echo "üìä Load Balancing Test..."
echo "========================="
echo "# Test both containers simultaneously"
echo "curl -X POST \"http://localhost:$PRIMARY_API_PORT/predict/\" \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{\"text\":\"European banking fraud test\",\"model\":\"ots-mbert\"}' &"
echo ""
echo "curl -X POST \"http://localhost:$SECONDARY_API_PORT/predict/\" \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{\"text\":\"Legitimate business email\",\"model\":\"ots-mbert\"}' &"
echo "wait"
echo ""

echo "üõë Cleanup Commands..."
echo "======================"
echo "# Stop containers"
echo "docker stop $PRIMARY_NAME $SECONDARY_NAME"
echo ""
echo "# Remove containers"
echo "docker rm $PRIMARY_NAME $SECONDARY_NAME"
echo ""
echo "# Remove images"
echo "docker rmi opentextshield:v2.5"
echo ""

echo "üìà Monitoring Commands..."
echo "========================="
echo "# View logs"
echo "docker logs $PRIMARY_NAME"
echo "docker logs $SECONDARY_NAME"
echo ""
echo "# Check resource usage"
echo "docker stats $PRIMARY_NAME $SECONDARY_NAME"
echo ""
echo "# Check container health"
echo "docker inspect $PRIMARY_NAME | jq '.[].State.Health'"
echo "docker inspect $SECONDARY_NAME | jq '.[].State.Health'"
echo ""

echo "üéØ Production Deployment..."
echo "==========================="
echo "# Using docker-compose for production"
echo "docker-compose up -d"
echo ""
echo "# Scale to multiple instances"
echo "docker-compose up -d --scale opentextshield=3"
echo ""
echo "# Check all instances"
echo "docker-compose ps"
echo ""

echo "üîó Service URLs..."
echo "=================="
echo "Primary API:     http://localhost:$PRIMARY_API_PORT"
echo "Primary Frontend: http://localhost:$PRIMARY_FRONTEND_PORT"
echo "Secondary API:   http://localhost:$SECONDARY_API_PORT"
echo "Secondary Frontend: http://localhost:$SECONDARY_FRONTEND_PORT"
echo ""
echo "Health Checks:"
echo "- http://localhost:$PRIMARY_API_PORT/health"
echo "- http://localhost:$SECONDARY_API_PORT/health"
echo ""
echo "API Documentation:"
echo "- http://localhost:$PRIMARY_API_PORT/docs"
echo "- http://localhost:$SECONDARY_API_PORT/docs"
echo ""
echo "TMForum Endpoints:"
echo "- http://localhost:$PRIMARY_API_PORT/tmf-api/aiInferenceJob"
echo "- http://localhost:$SECONDARY_API_PORT/tmf-api/aiInferenceJob"